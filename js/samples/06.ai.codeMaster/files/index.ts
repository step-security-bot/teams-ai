import { registerDefaultActions } from "./actions";
import { BackgroundImage, registerDefaultElements } from "./elements";

export {
  ExecuteAction,
  HttpAction,
  HttpHeader,
  OpenUrlAction,
  ResetInputsAction,
  StringWithSubstitutions,
  SubmitAction,
  SubmitActionBase,
  ToggleVisibilityAction,
  registerDefaultActions,
} from "./actions";
export {
  Action,
  ActionAlignment,
  ActionButtonBase,
  ActionIconPlacement,
  ActionMode,
  ActionStyle,
  ActionsConfig,
  AdaptiveCardConfig,
  BaseSerializationContext,
  BaseTextDefinition,
  BoolProperty,
  CardElement,
  CardObject,
  CardObjectRegistry,
  ColorDefinition,
  ColorSetDefinition,
  ContainerStyle,
  ContainerStyleDefinition,
  ContainerStyleSet,
  ContentTypes,
  CustomProperty,
  EnumProperty,
  FactSetConfig,
  FactTextDefinition,
  FactTitleDefinition,
  FillMode,
  FontType,
  FontTypeDefinition,
  FontTypeSet,
  GlobalRegistry,
  GlobalSettings,
  HorizontalAlignment,
  HostCapabilities,
  HostConfig,
  ImageSetConfig,
  ImageSize,
  ImageStyle,
  InputConfig,
  InputLabelConfig,
  InputTextStyle,
  LogLevel,
  MediaConfig,
  NumProperty,
  Orientation,
  PaddingDefinition,
  PixelSizeProperty,
  PropertyDefinition,
  RefreshMode,
  RenderableCardObject,
  RequiredInputLabelTextDefinition,
  SerializableObject,
  SerializableObjectCollectionProperty,
  SerializableObjectProperty,
  SerializableObjectSchema,
  SerializationContext,
  ShowCardActionConfig,
  ShowCardActionMode,
  Size,
  SizeAndUnit,
  SizeUnit,
  Spacing,
  SpacingDefinition,
  StringArrayProperty,
  StringProperty,
  Strings,
  TableConfig,
  TextBlockConfig,
  TextColor,
  TextColorDefinition,
  TextSize,
  TextStyleDefinition,
  TextStyleSet,
  TextWeight,
  TypeErrorType,
  TypedSerializableObject,
  TypedSerializableObjectProperty,
  UUID,
  ValidationEvent,
  ValidationPhase,
  ValidationResults,
  ValueSetProperty,
  Version,
  Versions,
  VerticalAlignment,
  addCancelSelectActionEventHandler,
  addClass,
  appendChild,
  clearElementChildren,
  createProps,
  dateToString,
  defaultHostConfig,
  defaultImageRenderer,
  formatText,
  generateUniqueId,
  getEnumValueByName,
  isMobileOS,
  isVersionLessOrEqual,
  parseBool,
  parseEnum,
  parseNumber,
  parseString,
  renderSeparation,
  stringToCssColor,
} from "./core";
export type {
  ActionButtonClass,
  ActionButtonState,
  AllHTMLAttributes,
  AppletsSettings,
  ButtonHTMLAttributes,
  CardElementHeight,
  CardObjectType,
  Dictionary,
  HostWidth,
  IAction,
  IActionButtonMenuItem,
  IActionButtonProps,
  IActionButtonRenderArgs,
  IActionCollection,
  IButtonClickEvent,
  ICreateCardObjectInstanceArgs,
  IDataQueryRequest,
  IDataQueryResponse,
  IElementSpacings,
  IFontSizeDefinitions,
  IFontWeightDefinitions,
  IImage,
  IInput,
  ILineHeightDefinitions,
  ILocalizableString,
  IMarkdownProcessingResult,
  IProcessableUrl,
  IResourceInformation,
  ISeparationDefinition,
  ISpacingDefinition,
  ITextProperties,
  ITypeRegistration,
  IValidationEvent,
  IVersionedValue,
  ImageRenderer,
  ImgHTMLAttributes,
  PropertyBag,
  Refresh,
  RenderArgs,
  SerializableObjectType,
  TargetVersion,
  TextBlockStyle,
} from "./core";
export {
  ActionSet,
  AdaptiveCard,
  AuthCardButton,
  Authentication,
  BackgroundImage,
  BaseTextBlock,
  CaptionSource,
  CardElementContainer,
  Column,
  ColumnSet,
  Component,
  Container,
  ContainerBase,
  ContainerStyleProperty,
  ContainerWithActions,
  ContentSource,
  CustomMediaPlayer,
  DailymotionPlayer,
  Fact,
  FactSet,
  HTML5MediaPlayer,
  IFrameMediaMediaPlayer,
  Image,
  ImageSet,
  Media,
  MediaBase,
  MediaPlayer,
  MediaSource,
  RefreshActionProperty,
  RefreshDefinition,
  RichTextBlock,
  ShowCardAction,
  StylableCardElementContainer,
  StylableContainer,
  Table,
  TableCell,
  TableColumnDefinition,
  TableRow,
  TextBlock,
  TextRun,
  TokenExchangeResource,
  VimeoPlayer,
  YouTubePlayer,
  registerDefaultElements,
} from "./elements";
export type { CellType, ColumnWidth, ICustomMediaPlayer } from "./elements";
export {
  Choice,
  ChoiceSetInputBase,
  DataQuery,
  DateInputBase,
  DateProperty,
  Input,
  NumberInputBase,
  TextInputBase,
  TimeInputBase,
  TimeProperty,
  ToggleInputBase,
} from "./inputs";
export type { ChoiceSetInputStyle } from "./inputs";

let initialized = false;

export function initialize() {
  if (!initialized) {
    registerDefaultActions();
    registerDefaultElements();

    initialized = true;
    BackgroundImage.themedUrlsProperty.isSerializationEnabled = false;
  }
}
